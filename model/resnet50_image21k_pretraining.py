# -*- coding: utf-8 -*-
"""resnet50_image21k_pretraining.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oPToXaAXpYS8UvnK46lWUOT1u0meRlTt
"""

import timm
import torch.distributed as dist
import torch
import torch.nn as nn


def get_dist_info():
    initialized = dist.is_available() and dist.is_initialized()
    if initialized:
        rank = dist.get_rank()
        world_size = dist.get_world_size()
    else:
        rank = 0
        world_size = 1
    return rank, world_size


def is_master():
    rank, _ = get_dist_info()
    return rank == 0


def print_at_master(str):
    if is_master():
        print(str)
def load_model_weights(model, model_path):
    state = torch.load(model_path, map_location='cpu')
    for key in model.state_dict():
        if 'num_batches_tracked' in key:
            continue
        p = model.state_dict()[key]
        if key in state['state_dict']:
            ip = state['state_dict'][key]
            if p.shape == ip.shape:
                p.data.copy_(ip.data)  # Copy the data of parameters
            else:
                print_at_master(
                    'could not load layer: {}, mismatch shape {} ,{}'.format(key, (p.shape), (ip.shape)))
        else:
            print_at_master('could not load layer: {}, not in checkpoint'.format(key))
    return model


def resnet50_pre_image21k(pretrained = True, num_classes = 6):
  model_res50 = timm.create_model('resnet50', pretrained=False, num_classes=11221)
  model_res50_pre_in21k = load_model_weights(model_res50, "/content/resnet50_miil_21k.pth") # modify the location of the file
  num_ftrs = model_res50_pre_in21k.fc.in_features
  model_res50_pre_in21k.fc = nn.Linear(num_ftrs, num_classes)
  return model_res50_pre_in21k